{"version":3,"sources":["components/day-card/DayCard.component.jsx","components/home/Home.component.jsx","components/favorites/Favorites.component.jsx","components/header/Header.component.jsx","App.js","serviceWorker.js","index.js"],"names":["DayCard","day","className","dayName","temp","description","Home","addToFavorites","favoritCity","apiKey","fiveDays","idLink","setCurrentCity","useState","cityName","setCityName","cityId","setCityId","ShowForecastButton","setShowForecastButton","dropdown","setDropdown","d","Date","weekday","Array","getDay","useEffect","fetch","then","response","json","citys","city","i","length","name","LocalizedName","id","Key","push","catch","error","console","alert","toCelsius","f","chooseCity","e","target","type","onChange","value","match","placeholder","onClick","currentCity","Math","round","log","map","includes","Favorites","favorites","remove","favorCity","el","key","to","Header","App","setFavorites","setFavoritCity","setIdLink","setFiveDays","getForecast","tempCitys","splice","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2e3e5f20.chunk.js","sourcesContent":["import React from 'react'\r\nimport './dayCard.styles.css'\r\n\r\nexport default function DayCard({day}) {\r\n    return (\r\n        <div className='card-container'>\r\n            <h4>{day.dayName}</h4>\r\n            <span>{`temp: ${day.temp}`}</span><br />\r\n            <span>{day.description}</span>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport './home.styles.css'\r\nimport DayCard from '../day-card/DayCard.component';\r\nimport DropdownItem from '../dropdown-Item/DropdownItem.component';\r\n\r\nexport default function Home({ addToFavorites, favoritCity, apiKey, idLink, fiveDays, setCurrentCity }) {\r\n    const [cityName, setCityName] = useState()\r\n    const [cityId, setCityId] = useState()\r\n    const [ShowForecastButton, setShowForecastButton] = useState(false)\r\n    const [dropdown, setDropdown] = useState([])\r\n\r\n\r\n    // async function forecasts (e) {'215854'\r\n    //     await setCityName(e.target.value)\r\n    //     await getAutoComplete()\r\n    // }\r\n    const hendleCity = (e) => {\r\n        let letters = /^[A-Za-z]+$/;\r\n        if (e.target.value.match(letters)) {\r\n            setCityName(e.target.value)\r\n        }\r\n        return\r\n    }\r\n\r\n\r\n    const d = new Date();\r\n    const weekday = new Array(7);\r\n    weekday[0] = \"Sunday\";\r\n    weekday[1] = \"Monday\";\r\n    weekday[2] = \"Tuesday\";\r\n    weekday[3] = \"Wednesday\";\r\n    weekday[4] = \"Thursday\";\r\n    weekday[5] = \"Friday\";\r\n    weekday[6] = \"Saturday\";\r\n    const n = weekday[d.getDay()]\r\n\r\n    // const [fiveDays, setFiveDays] = useState(\r\n    //     { cityName: 'Tel-Aviv', dayName: weekday[d.getDay()], temp: '25', description: 'sunny' },\r\n    //     { dayName: weekday[d.getDay() + 1], temp: '25', description: 'sunny' },\r\n    //     { dayName: weekday[d.getDay() + 2], temp: '25', description: 'sunny' },\r\n    //     { dayName: weekday[d.getDay() + 3], temp: '25', description: 'sunny' },\r\n    //     { dayName: weekday[d.getDay() + 4], temp: '25', description: 'sunny' },\r\n    // )\r\n    const add = () => {\r\n        addToFavorites(fiveDays, cityName, cityId)\r\n    }\r\n\r\n\r\n    // const apiKey = 'zVhGeErzJGOyps8fmH1Qz26uQc3DhvC5'\r\n\r\n    const getAutoComplete = () => {\r\n        if (cityName == '') {\r\n            return\r\n        }\r\n        fetch(`http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${apiKey}&q=${cityName}`)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                let citys = [];\r\n                // let cityNames = [];\r\n                let city = {};\r\n                for (let i = 0; i < response.length; i++) {\r\n                    city = {\r\n                        name: response[i].LocalizedName,\r\n                        id: response[i].Key\r\n                    }\r\n                    // citys.push(city)\r\n                    citys.push(city)\r\n                    // setRes([...citys,\r\n                    //     {\r\n                    //         name: response[i].LocalizedName,\r\n                    //         id: response[i].Key\r\n                    //     }\r\n                    // ])\r\n                    // console.log(response[i].LocalizedName)\r\n                    // keys.push(response[i].Key)\r\n                }\r\n                setDropdown(citys)\r\n                // setRes(citys)\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n                alert('error!  Something wrong...')\r\n            })\r\n    }\r\n\r\n    useEffect(() => { getAutoComplete(cityName) }, [cityName])\r\n\r\n\r\n\r\n\r\n    const getForecast = () => {\r\n        fetch(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityId}?apikey=${apiKey}`)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                let currentCity = [\r\n                    {\r\n                        cityName: cityName,\r\n                        id: cityId,\r\n                        dayName: weekday[d.getDay()],\r\n                        temp: Math.round(toCelsius([response['DailyForecasts'][0]['Temperature']['Maximum']['Value']])),\r\n                        description: [response['DailyForecasts'][0]['Day']['IconPhrase']]\r\n                    },\r\n                    {\r\n                        dayName: weekday[d.getDay() + 1],\r\n                        temp: Math.round(toCelsius([response['DailyForecasts'][1]['Temperature']['Maximum']['Value']])),\r\n                        description: [response['DailyForecasts'][2]['Day']['IconPhrase']]\r\n                    },\r\n                    {\r\n                        dayName: weekday[d.getDay() + 2],\r\n                        temp: Math.round(toCelsius([response['DailyForecasts'][2]['Temperature']['Maximum']['Value']])),\r\n                        description: [response['DailyForecasts'][2]['Day']['IconPhrase']]\r\n                    },\r\n                    {\r\n                        dayName: weekday[d.getDay() + 3],\r\n                        temp: Math.round(toCelsius([response['DailyForecasts'][3]['Temperature']['Maximum']['Value']])),\r\n                        description: [response['DailyForecasts'][3]['Day']['IconPhrase']]\r\n                    },\r\n                    {\r\n                        dayName: weekday[d.getDay() + 4],\r\n                        temp: Math.round(toCelsius([response['DailyForecasts'][4]['Temperature']['Maximum']['Value']])),\r\n                        description: [response['DailyForecasts'][4]['Day']['IconPhrase']]\r\n                    },\r\n                ]\r\n                setCurrentCity(currentCity)\r\n                console.log([response['DailyForecasts'][0]['Temperature']['Minimum']['Value']]);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n                alert('error!  Something wrong with calling a server, please choose a city')\r\n            })\r\n    }\r\n\r\n    const toCelsius = (f) => {\r\n        return (5 / 9) * (f - 32)\r\n    }\r\n\r\n    // const getForecastForFavor = (idLink) => {\r\n    //     const getForecast = (idLink) => {\r\n    //         fetch(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${idLink}?apikey=${apiKey}`)\r\n    //             .then(response => response.json())\r\n    //             .then(response => {\r\n    //                 setFiveDays([\r\n    //                     {\r\n    //                         cityName: cityName,\r\n    //                         id: cityId,\r\n    //                         dayName: weekday[d.getDay()],\r\n    //                         temp: Math.round(toCelsius([response['DailyForecasts'][0]['Temperature']['Maximum']['Value']])),\r\n    //                         description: [response['DailyForecasts'][0]['Day']['IconPhrase']]\r\n    //                     },\r\n    //                     {\r\n    //                         dayName: weekday[d.getDay() + 1],\r\n    //                         temp: Math.round(toCelsius([response['DailyForecasts'][1]['Temperature']['Maximum']['Value']])),\r\n    //                         description: [response['DailyForecasts'][2]['Day']['IconPhrase']]\r\n    //                     },\r\n    //                     {\r\n    //                         dayName: weekday[d.getDay() + 2],\r\n    //                         temp: Math.round(toCelsius([response['DailyForecasts'][2]['Temperature']['Maximum']['Value']])),\r\n    //                         description: [response['DailyForecasts'][2]['Day']['IconPhrase']]\r\n    //                     },\r\n    //                     {\r\n    //                         dayName: weekday[d.getDay() + 3],\r\n    //                         temp: Math.round(toCelsius([response['DailyForecasts'][3]['Temperature']['Maximum']['Value']])),\r\n    //                         description: [response['DailyForecasts'][3]['Day']['IconPhrase']]\r\n    //                     },\r\n    //                     {\r\n    //                         dayName: weekday[d.getDay() + 4],\r\n    //                         temp: Math.round(toCelsius([response['DailyForecasts'][4]['Temperature']['Maximum']['Value']])),\r\n    //                         description: [response['DailyForecasts'][4]['Day']['IconPhrase']]\r\n    //                     },\r\n    //                 ])\r\n    //                 console.log([response['DailyForecasts'][0]['Temperature']['Minimum']['Value']]);\r\n\r\n    //             })\r\n    //             .catch((error) => {\r\n    //                 console.error('Error:', error);\r\n    //                 alert('error!  Something wrong with calling a server, please choose a city')\r\n    //             })\r\n    //     }\r\n\r\n    // }\r\n\r\n    // useEffect(getForecast, [])\r\n    // useEffect(getForecastForFavor, [idLink])\r\n    const clickButtonForecast = () =>{\r\n        setShowForecastButton(!ShowForecastButton)\r\n        getForecast()\r\n    }\r\n\r\n    const chooseCity = (e) => {\r\n        setCityId(e.target.id)\r\n        setCityName(e.target.name)\r\n        setDropdown([])\r\n        setShowForecastButton(!ShowForecastButton)\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <h1>WEATHER APP</h1>\r\n            <div className='dropdown'>\r\n                {/* <button onClick={chooseCity}>AutoComplete</button> */}\r\n                <input\r\n                    // value = {cityName}\r\n                    className='input'\r\n                    type=\"text\"\r\n                    onChange={hendleCity}\r\n                    placeholder={cityName}\r\n                />\r\n\r\n                {ShowForecastButton ?  <div>\r\n                    <h3>{cityName}</h3>\r\n                    <button onClick={clickButtonForecast} >getForecast</button>\r\n                    \r\n                </div> :null } \r\n\r\n\r\n\r\n\r\n                <div className='button-container'>\r\n                    {dropdown.map(city => {\r\n                        return <button className='button' onClick={chooseCity} id={city.id} name={city.name}>{city.name}</button>\r\n                        // return <button onClick={chooseCity} id={city.id} name={city.name} >\r\n                        //     {city.name}\r\n                        // </button>\r\n                    })}\r\n                    {/* <DropdownItem\r\n                        city={dropdown}\r\n                        res = {res}\r\n                        // getcityforkey={getcityforkey}\r\n                    /> */}\r\n                    {/* {res.length ?\r\n                        \r\n                          (  res.map(item => (\r\n                            <DropdownItem\r\n                                // getcityforkey={getcityforkey}\r\n                                // index={item.index}\r\n                                city={item}\r\n                                className='dropdown-content' />\r\n                        ))\r\n                        )\r\n                        \r\n                        : null} */}\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div>{fiveDays ? <div>\r\n                <h2>{fiveDays[0].cityName}</h2>\r\n                <h5>{`${fiveDays[0].temp} C`}</h5>\r\n            </div>\r\n                : null}\r\n\r\n                {/* // <h2>{fiveDays[0].cityName}</h2>\r\n                // <h5>{`${fiveDays[0].temp} C`}</h5> */}\r\n            </div>\r\n\r\n            <div>\r\n\r\n                {favoritCity.includes(cityName) ?\r\n                    <h3>in your favorites!</h3>\r\n\r\n                    : <button className='add-button' onClick={add}>ADD TO FAVORITES</button>\r\n                }\r\n            </div>\r\n\r\n            <div >\r\n                {fiveDays ?\r\n                    <div className='card-list'>{fiveDays.map(day => {\r\n                        return <DayCard day={day} />\r\n                    })}</div> : null}\r\n                {/* {fiveDays.map(day => {\r\n                    return <DayCard day={day} />\r\n                })} */}\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport FavoriteCard from '../favorite-card/FavoriteCard.component'\r\n// import '/favorites.styles.css'\r\n\r\nexport default function Favorites({ favorites, remove, favorCity }) {\r\n\r\n    // const [list, setList] = useState(favorites)\r\n\r\n    // const getForecasForDay = (city,id) => {\r\n    //     fetch(`http://dataservice.accuweather.com/forecasts/v1/daily/1day/${id}?apikey=zVhGeErzJGOyps8fmH1Qz26uQc3DhvC5`)\r\n    //         .then(response => response.json())\r\n    //         .then(response => {\r\n    //             setFavorites([\r\n    //                 ...favorites,\r\n    //                 {\r\n    //                     cityName:city,\r\n    //                     temp:  Math.round(toCelsius([response['DailyForecasts']['Temperature']['Maximum']['Value']])),\r\n    //                     dicription: [response['DailyForecasts']['Day']['IconPhrase']]\r\n    //                 }\r\n    //             ])\r\n    //             console.log(response);\r\n    //         })\r\n    // }\r\n\r\n    // const remove = (cityName) => {\r\n    //     for(let i=0; i<favorites.length; i++){\r\n    //         if(cityName === favorites[0].cityName){\r\n    //             let index = i \r\n    //         }\r\n    //     }\r\n    //     setList([favorites.splice(index,1)])\r\n    // }\r\n\r\n    // const remove = (city) => {\r\n\r\n    //     let temp = favorites\r\n\r\n    //     for (let i = 0; i < favorites.length; i++) {\r\n    //         if (city === favorites[i].cityName) {\r\n    //             temp.splice(i, 1)\r\n    //         }\r\n    //         setList(temp)\r\n    //     }\r\n\r\n    // }\r\n\r\n\r\n    // useEffect(()=>{console.log('a')},[favorites]);\r\n    // const favorCity = (id) => {\r\n    //     return id\r\n    // }\r\n\r\n    // const a = (city) => {\r\n    //     favorCity(city)\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Favorites</h2>\r\n\r\n            {favorites.map(el => {\r\n                return <div className='card' key={el.cityName}>\r\n                   \r\n                        <h3>{el.cityName}</h3>\r\n                        <span>{`${el.temp} C`}</span><br />\r\n                        <span>{el.description}</span>\r\n                        {/* </div> */}\r\n                    \r\n                    <button onClick={() => { remove(el.cityName) }}>Remove from favorites</button>\r\n                    <Link to=\"/\" > <button onClick={() => { favorCity(el.id,el.cityName) }}>Forecast for the next five days</button></Link>\r\n\r\n                </div>\r\n                // return  <FavoriteCard city={el} index={el.index} remove={remove} favorCity={favorCity}/>\r\n            })}\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './heder.styles.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className='navbar'>\r\n            <nav> <Link to=\"/\">Home</Link></nav>\r\n            <nav><Link to=\"/favorites\">Favorites</Link></nav>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport Home from './components/home/Home.component';\nimport Favorites from './components/favorites/Favorites.component';\nimport './App.css';\nimport Header from './components/header/Header.component';\n\nfunction App() {\n\n    const apiKey = 'QYylxcXXDdrg29f1NpiATnTucczeI4ig'\n\n    const [favorites, setFavorites] = useState([])\n    const [favoritCity, setFavoritCity] = useState('')\n    const [idLink, setIdLink] = useState()\n    const [fiveDays, setFiveDays] = useState()\n\n    const setCurrentCity = (currentCity) => {\n        setFiveDays(currentCity)\n    }\n\n\n\n    const d = new Date();\n    const weekday = new Array(7);\n    weekday[0] = \"Sunday\";\n    weekday[1] = \"Monday\";\n    weekday[2] = \"Tuesday\";\n    weekday[3] = \"Wednesday\";\n    weekday[4] = \"Thursday\";\n    weekday[5] = \"Friday\";\n    weekday[6] = \"Saturday\";\n    const n = weekday[d.getDay()]\n\n    const getForecast = (cityId, cityName) => {\n        fetch(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityId}?apikey=${apiKey}`)\n            .then(response => response.json())\n            .then(response => {\n                setFiveDays([{\n                            cityName: cityName,\n                            id: cityId,\n                            dayName: weekday[d.getDay()],\n                            temp: Math.round(toCelsius([response['DailyForecasts'][0]['Temperature']['Maximum']['Value']])),\n                            description: [response['DailyForecasts'][0]['Day']['IconPhrase']]\n                        },\n                        {\n                            dayName: weekday[d.getDay() + 1],\n                            temp: Math.round(toCelsius([response['DailyForecasts'][1]['Temperature']['Maximum']['Value']])),\n                            description: [response['DailyForecasts'][2]['Day']['IconPhrase']]\n                        },\n                        {\n                            dayName: weekday[d.getDay() + 2],\n                            temp: Math.round(toCelsius([response['DailyForecasts'][2]['Temperature']['Maximum']['Value']])),\n                            description: [response['DailyForecasts'][2]['Day']['IconPhrase']]\n                        },\n                        {\n                            dayName: weekday[d.getDay() + 3],\n                            temp: Math.round(toCelsius([response['DailyForecasts'][3]['Temperature']['Maximum']['Value']])),\n                            description: [response['DailyForecasts'][3]['Day']['IconPhrase']]\n                        },\n                        {\n                            dayName: weekday[d.getDay() + 4],\n                            temp: Math.round(toCelsius([response['DailyForecasts'][4]['Temperature']['Maximum']['Value']])),\n                            description: [response['DailyForecasts'][4]['Day']['IconPhrase']]\n                        },\n                    ])\n                    // console.log([response['DailyForecasts'][0]['Temperature']['Minimum']['Value']]);\n\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n                alert('error!  Something wrong with calling a server, please choose a city')\n            })\n    }\n\n    const toCelsius = (f) => {\n        return (5 / 9) * (f - 32)\n    }\n\n\n\n    // const toCelsius = (f) => {\n    //     return (5 / 9) * (f - 32)\n    // }\n    // const getForecasForDay = (city, id) => {\n    //     fetch(`http://dataservice.accuweather.com/forecasts/v1/daily/1day/${id}?apikey=zVhGeErzJGOyps8fmH1Qz26uQc3DhvC5`)\n    //         .then(response => response.json())\n    //         .then(response => {\n    //             setFavorites([\n    //                 ...favorites,\n    //                 {\n    //                     cityName: city,\n    //                     temp: Math.round(toCelsius([response['DailyForecasts']['Temperature']['Maximum']['Value']])),\n    //                     dicription: [response['DailyForecasts']['Day']['IconPhrase']]\n    //                 }\n    //             ])\n    //             console.log(response);\n    //         })\n    // }\n\n\n\n    const addToFavorites = (fiveDays, city, id) => {\n        // getForecasForDay(city, id)\n        setFavorites([...favorites, fiveDays[0]])\n        setFavoritCity([...favoritCity, city])\n    }\n\n\n    const remove = (city) => {\n\n        let temp = favorites\n        let tempCitys = favoritCity\n\n        for (let i = 0; i < favorites.length; i++) {\n            if (city === favorites[i].cityName) {\n                temp.splice(i, 1)\n                tempCitys.splice(i, 1)\n\n                setFavorites(temp)\n            }\n\n        }\n    }\n\n    const favorCity = (cityId, cityName) => {\n        getForecast(cityId, cityName)\n        setIdLink(cityId)\n    }\n\n\n\n    return ( < div className = \"App\" >\n        <\n        Router >\n\n        <\n        div >\n        <\n        Header / >\n        <\n        Switch >\n        <\n        Route path = \"/Favorites\" >\n        <\n        Favorites favorites = { favorites }\n        apiKey = { apiKey }\n        remove = { remove }\n        favorCity = { favorCity }\n        getForecast = { getForecast }\n        / > < /\n        Route > <\n        Route path = \"/\" >\n        <\n        Home addToFavorites = { addToFavorites }\n        favoritCity = { favoritCity }\n        apiKey = { apiKey }\n        remove = { remove }\n        idLink = { idLink }\n        fiveDays = { fiveDays }\n        setCurrentCity = { setCurrentCity }\n\n        / > < /\n        Route > <\n        /Switch> < /\n        div > <\n        /Router> < /\n        div >\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}